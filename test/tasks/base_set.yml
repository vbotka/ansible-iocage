---
# Ansible managed

# Expect iocage to pass with expected message(s).
# Status:
# pass ..... module pass with expected message(s)
# fail ..... module pass without expected message(s)
# crash .... module crash

- ansible.builtin.set_fact:
    _crash: true

- name: "base_set: Set properties in {{ basejail }}"
  block:

    - name: " >>> TEST START: base_set: Set properties in {{ basejail }}"
      register: result
      iocage:
        name: '{{ basejail }}'
        properties: '{{ properties }}'
        state: set

    - ansible.builtin.set_fact:
        _crash: false

    - ansible.builtin.debug:
        var: result
      when: debug2 | bool
    - ansible.builtin.debug:
        var: result.msg
      when: debug | bool
    - ansible.builtin.debug:
        var: iocage_templates[basejail].properties.template
      when: debug | bool

  rescue:

    - ansible.builtin.debug:
        var: ansible_failed_result
      when: debug | bool

    - ansible.builtin.import_tasks: custom_stats_crash.yml

- name: No crash
  when: not _crash
  vars:
    _msg1: "already set in jail '{{ basejail }}'"
    _msg2: "were set in jail '{{ basejail }}'"
    _msg3: "would be set in jail '{{ basejail }}'"
  block:

    - ansible.builtin.assert:
        fail_msg: "[ERR] {{ _test_name }}: Failed: {{ result.msg }}"
        success_msg: "[OK]  {{ _test_name }}: Passed: {{ result.msg }}"
        that:
          - _msg1 in result.msg or _msg2 in result.msg or _msg3 in result.msg

    - ansible.builtin.import_tasks: custom_stats_pass.yml

  rescue:

    - ansible.builtin.debug:
        msg: |
          [ERR] {{ _test_name }} failed. Missing: {{ _msg1 }} or {{ _msg2 }} or {{ _msg3 }}
          {{ ansible_failed_task }}
          {{ ansible_failed_result }}
      when: debug | bool

    - ansible.builtin.import_tasks: custom_stats_fail.yml

# EOF
